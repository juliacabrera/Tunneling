
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as matanim
from matplotlib.animation import FuncAnimation
# Establim els paràmetres del problema
tmax = 20
dt = 0.04
lx = 17
nx = 500
nt = 500
dx = 0.068


hbarra = 1
m = 1
p0 = 200.0/float(lx)
#Contruim un vector amb els valors de x
xx = np.arange(-17.0,17.0,dx)

# Ens contruim la matriu A
matriu_B = 1j*np.zeros((nx,nt))

#Definim els tres vectors que serien les tres diagnoals de la matriu A
a = 1j*np.zeros(nx)
b = 1j*np.zeros(nx)
c = 1j*np.zeros(nx)

#Definim el paràmetre r per tal que ens sigui més còmode la definició del H
r = (hbarra**2)/(2*m*(dx**2))

#Definim la matriu Hamiltonià
matriu_H = 1j*np.zeros((nt,nx))
# Definim el vector potencial
V = 1j*np.zeros(nx)
for i in range(0,nx):
   V[i] = 42.55*np.exp(- (xx[i]/0.1)**2)/np.sqrt(0.1*np.pi)
   
#Construim la matriu Hamiltoniana
for i in range(0,nx):
    if i==0:
        matriu_H[i,i] = (V[i] + 2*r) 
        matriu_H[i,i+1] = ((-1)*r)   
    elif i==nx-1:
       matriu_H[i,i] = (V[i] + 2*r) 
       matriu_H[i,i-1] = ((-1)*r)   
    else:
        matriu_H[i,i] = (V[i] + 2*r) 
        matriu_H[i,i+1] = ((-1)*r)   
        matriu_H[i,i-1] = ((-1)*r)  

#Omplim ara els vectors a,b,c i construim la matriu B
for i in range(0,nx):
    if i==0:
        b[i] = matriu_H[i,i]*(1j*dt/(2*hbarra)) + 1
        c[i] = matriu_H[i,i+1]*(1j*dt/(2*hbarra))  + 1
        
        matriu_B[i,i] = 1 - matriu_H[i,i]*(1j*dt/(2*hbarra))
        matriu_B[i,i+1] = 1 - matriu_H[i,i+1]*(1j*dt/(2*hbarra))
    elif i==nx-1:
       b[i] = matriu_H[i,i]*(1j*dt/(2*hbarra))  + 1
       a[i] = matriu_H[i,i-1]*(1j*dt/(2*hbarra))  + 1
       
       matriu_B[i,i] = 1 - matriu_H[i,i]*(1j*dt/(2*hbarra))
       matriu_B[i,i-1] = 1 - matriu_H[i,i-1]*(1j*dt/(2*hbarra)) 
    else:
        b[i] = matriu_H[i,i]*(1j*dt/(2*hbarra)) + 1
        c[i] = matriu_H[i,i+1]*(1j*dt/(2*hbarra))  + 1
        a[i] = matriu_H[i,i-1]*(1j*dt/(2*hbarra))  + 1
        
        matriu_B[i,i] = 1 - matriu_H[i,i]*(1j*dt/(2*hbarra)) 
        matriu_B[i,i+1] = 1 - matriu_H[i,i+1]*(1j*dt/(2*hbarra))   
        matriu_B[i,i-1] = 1 - matriu_H[i,i-1]*(1j*dt/(2*hbarra))   


#Creem un vector per la funció d'ona
phi_ant = 1j*np.zeros(nx)
phi_post = 1j*np.zeros(nx)

#També construim una matriu solució per anar guardant els valors de la funció 
#d'ona a cada temps
matriu_sol = 1j*np.zeros((nx,nt))

#Imposem el paquet d'ona inicial
for i in range(0,nx):
    phi_ant[i] = ((np.exp(((-1)*(xx[i]-7)**2)/4.0))/((2*np.pi)**(1.0/4.0)))*np.exp(-1j*p0*xx[i])



# FUNCIÓ TRIDIAG
    #Li entrem les tres diagnoals de la matriu A i el vector d 
    #Ens resol el sistema matriu_A*x = d
def tridiag(a,b,c,d):
    
    n = len(d)
    
    c[0] /= b[0]
    d[0] /= b[0]
    
    for i in range(1,n):
        denom = b[i] - (a[i] * c[i-1])
        c[i] /= denom
        if c[i] == 0:
            c[i] = 0.00000001
            print('error',i)
        d[i] = (d[i] -(a[i]*d[i-1]))/denom
    
    
    x = [0 for i in range(n)]
    x[-1] = d[-1]
    
    for i in range(-2,-1-n,-1):
        x[i] = d[i] - c[i] * x[i+1]
        
    return x



d = 1j*np.zeros(nt) #és un vector de totes les posicions per a cada temps


for i in range (0,nt):
    d = np.dot(matriu_B,phi_ant)
    phi_post = tridiag(a,b,c,d)
    #guardem phi_post a la matriu solucio
    matriu_sol[:,i] = phi_post*np.conjugate(phi_post) 
    phi_ant = phi_post
